---
description: How to add new native apps with views, MCP tools, and AI chat integration
globs: 
alwaysApply: false
---
# Adding Native Apps & Views with MCP Tool Integration

This guide covers the complete pattern for adding new native applications to deco CMS, from MCP tools to frontend views with AI chat integration.

## Overview

Native apps are first-class features in deco CMS that:
- Expose MCP tools for programmatic access
- Provide dedicated UI views for user interaction
- Integrate with AI chat for conversational interfaces
- Appear in sidebar navigation automatically
- Support organization and project-level scoping

## Step 1: Create MCP Tools

### 1.1 Define Tool Group

Create a new tool group that will become a virtual integration:

```typescript
// packages/sdk/src/mcp/{feature}/api.ts
import { createToolGroup } from "../context.ts";

export const createTool = createToolGroup("{Feature}", {
  name: "{Feature} Management",
  description: "Manage {feature} settings and configuration.",
  icon: "https://assets.decocache.com/mcp/{uuid}/{feature}.png",
  // workspace: true  // Only if this is workspace-scoped, omit for org-level
});
```

**Important**: The group name becomes the integration ID as `i:{name-in-kebab-case}`.

### 1.2 Implement Tools with Proper Return Types

MCP tools must return **objects**, not nullable primitives:

```typescript
// ❌ BAD - Returns nullable primitive
export const getTheme = createTool({
  name: "THEME_GET",
  handler: async (props, c) => {
    return theme || null;  // Type error: null not assignable to object
  },
});

// ✅ GOOD - Returns object wrapper
export const getTheme = createTool({
  name: "THEME_GET",
  outputSchema: z.object({
    theme: themeSchema.nullable(),
  }),
  handler: async (props, c) => {
    return { theme: theme || null };
  },
});
```

### 1.3 Handle Organization Context

For org-level features, auto-resolve org ID from context:

```typescript
import { getOrgIdFromContext } from "../projects/util.ts";

export const updateOrgSetting = createTool({
  name: "SETTING_UPDATE_ORG",
  inputSchema: z.object({
    orgId: z.number().optional(), // Make optional
    setting: settingSchema,
  }),
  handler: async (props, c) => {
    // Auto-resolve from context if not provided
    const orgId = props.orgId ?? await getOrgIdFromContext(c);
    
    if (!orgId) {
      throw new Error("No organization context available");
    }

    // Use org slug for authorization (not ID!)
    const orgSlug = c.locator?.org;
    await assertTeamResourceAccess("TEAMS_UPDATE", orgSlug, c);

    // Use drizzle for database operations
    const result = await c.drizzle
      .update(organizations)
      .set({ setting: props.setting })
      .where(eq(organizations.id, orgId))
      .returning();

    return { setting: result[0].setting };
  },
});
```

**Key Points**:
- Use `assertTeamResourceAccess` with **org slug**, not org ID
- Authorization system expects slugs for team resources
- Make `orgId` optional and auto-resolve from `c.locator.org`

### 1.4 Register Tools

Add to appropriate tool collection:

```typescript
// packages/sdk/src/mcp/index.ts

// For workspace-scoped features
export const PROJECT_TOOLS = [
  // ...
  featureAPI.getSetting,
  featureAPI.updateSetting,
] as const;

// For org-level features (if tools need workspace context)
export const PROJECT_TOOLS = [
  // ...
  featureAPI.getOrgSetting,
  featureAPI.updateOrgSetting,
] as const;
```

## Step 2: Create CRUD Layer

### 2.1 Define Typed Operations

```typescript
// packages/sdk/src/crud/{feature}.ts
import { MCPClient } from "../fetcher.ts";
import type { ProjectLocator } from "../locator.ts";

export interface GetOrgSettingInput {
  locator: ProjectLocator;  // Always include for scoped clients
  orgId: number;
}

export const getOrgSetting = async (
  input: GetOrgSettingInput,
  init?: RequestInit,
): Promise<Setting | null> => {
  const result = await MCPClient.forLocator(input.locator).SETTING_GET_ORG(
    { orgId: input.orgId },
    init,
  );
  return (result as { setting: Setting | null }).setting;
};
```

**Key Pattern**: Always unwrap MCP tool responses that return object wrappers.

### 2.2 Create React Query Hooks

```typescript
// packages/sdk/src/hooks/{feature}.ts
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { useSDK } from "./store.tsx";

export function useOrgSetting(orgId?: number) {
  const { locator } = useSDK();

  return useQuery({
    queryKey: ["org-setting", orgId],
    queryFn: () => orgId && locator ? getOrgSetting({ locator, orgId }) : null,
    enabled: !!orgId && !!locator,
  });
}

export function useUpdateOrgSetting() {
  const client = useQueryClient();
  const { locator } = useSDK();

  return useMutation({
    mutationFn: (input: Omit<UpdateOrgSettingInput, 'locator'>) => {
      if (!locator) throw new Error('No locator available');
      return updateOrgSetting({ ...input, locator });
    },
    onSuccess: (_, variables) => {
      client.invalidateQueries({ queryKey: ["org-setting", variables.orgId] });
      
      // Invalidate related caches
      if (locator) {
        const { org } = Locator.parse(locator);
        client.invalidateQueries({ queryKey: KEYS.TEAM_THEME(org) });
      }
    },
  });
}
```

## Step 3: Register Native App

### 3.1 Add to Native Apps List

```typescript
// apps/web/src/components/integrations/apps.ts

export const NATIVE_APPS: GroupedApp[] = [
  // ...
  {
    id: "native:::feature-editor",
    name: "Feature Editor",
    icon: "icon://settings",
    description: "Configure feature settings",
    instances: 1,
    provider: "native",
    usedBy: [],
    isNative: true,
  },
];

export const NATIVE_APP_NAME_MAP: Record<string, string> = {
  // ...
  "native:::feature-editor": "Feature Editor",
};
```

### 3.2 Add Default View

```typescript
// packages/sdk/src/views.ts

export const DEFAULT_VIEWS: View[] = [
  // ...
  {
    id: "feature-editor",
    title: "Feature Editor",
    icon: "settings",
    type: "default",
    metadata: {
      path: "/feature-editor",
    },
  },
];
```

### 3.3 Update Sidebar Navigation

Add to well-known items and ordering:

```typescript
// apps/web/src/components/sidebar/index.tsx

const wellKnownItems = [
  "Tools",
  "Views",
  "Workflows",
  "Documents",
  "Agents",
  "Feature Editor",  // Add here
];

const resourceTypeOrder = [
  "Documents",
  "Agents",
  "Workflows",
  "Tools",
  "Views",
  "Files",
  "Feature Editor",  // Add here
];
```

## Step 4: Create Frontend View

### 4.1 Resource List Component

```typescript
// apps/web/src/components/feature-editor/feature-editor-resource-list.tsx
import { useMemo } from "react";
import { useParams } from "react-router";
import { useTrackNativeViewVisit, useSDK, type View } from "@deco/sdk";
import { useCurrentTeam } from "../sidebar/team-selector.tsx";
import { FeatureEditorView } from "./feature-editor-view.tsx";

export function FeatureEditorResourceList() {
  const { locator } = useSDK();
  const team = useCurrentTeam();

  const projectKey = typeof locator === "string" ? locator : undefined;
  const featureViewId = useMemo(() => {
    const views = (team?.views ?? []) as View[];
    const view = views.find((v) => v.title === "Feature Editor");
    return view?.id;
  }, [team?.views]);

  // Track visit for recents/pinning
  useTrackNativeViewVisit({
    viewId: featureViewId || "feature-editor-fallback",
    viewTitle: "Feature Editor",
    viewIcon: "settings",
    viewPath: `/${projectKey}/feature-editor`,
    projectKey,
  });

  return <FeatureEditorView />;
}
```

### 4.2 Main View Component with AI Chat Integration

```typescript
// apps/web/src/components/feature-editor/feature-editor-view.tsx
import { useMemo } from "react";
import { useForm } from "react-hook-form";
import { useSetThreadContextEffect } from "../decopilot/thread-context-provider.tsx";

export function FeatureEditorView() {
  const team = useCurrentTeam();
  const orgId = typeof team?.id === "number" ? team.id : undefined;
  
  // Load data
  const { data: setting, isLoading } = useOrgSetting(orgId);
  const updateMutation = useUpdateOrgSetting();

  // AI Chat Context Integration
  const threadContextItems = useMemo<Array<
    { id: string; type: "rule"; text: string } | 
    { id: string; type: "toolset"; integrationId: string; enabledTools: string[] }
  >>(() => {
    const rules = [
      `You are helping configure feature settings for the organization.`,
      `Use SETTING_UPDATE_ORG to update settings. Do NOT pass orgId - it will be auto-determined from context.`,
      `Available settings: {list settings and their purposes}`,
    ];

    const contextItems: Array<
      { id: string; type: "rule"; text: string } | 
      { id: string; type: "toolset"; integrationId: string; enabledTools: string[] }
    > = rules.map((text) => ({
      id: crypto.randomUUID(),
      type: "rule" as const,
      text,
    }));

    // Add feature management toolset
    contextItems.push({
      id: crypto.randomUUID(),
      type: "toolset" as const,
      integrationId: "i:feature-management",  // Matches tool group name
      enabledTools: ["SETTING_GET_ORG", "SETTING_UPDATE_ORG"],
    });

    // Add HTTP fetch for external data
    contextItems.push({
      id: crypto.randomUUID(),
      type: "toolset" as const,
      integrationId: "i:http",
      enabledTools: ["HTTP_FETCH"],
    });

    return contextItems;
  }, []);

  // Inject context into AI thread
  useSetThreadContextEffect(threadContextItems);

  // Form and UI implementation...
  return (
    <div>
      {/* Feature editor UI */}
    </div>
  );
}
```

**Key Pattern**: Use explicit union type for `threadContextItems` to satisfy TypeScript:
```typescript
Array<
  { id: string; type: "rule"; text: string } | 
  { id: string; type: "toolset"; integrationId: string; enabledTools: string[] }
>
```

### 4.3 Add Route

```typescript
// apps/web/src/main.tsx

// In org-level routes
{
  path: "feature-editor",
  element: <FeatureEditorResourceList />,
},

// Or in project-level routes
{
  path: ":project/feature-editor",
  element: <FeatureEditorResourceList />,
},
```

## Step 5: Chat Integration Patterns

### 5.1 Auto-Reload on AI Updates

For features that update visual state, trigger reloads when AI updates:

```typescript
// apps/web/src/components/chat/provider.tsx

const chat = useChat({
  // ...
  onToolCall: ({ toolCall }) => {
    // Handle feature updates
    if (toolCall.toolName === "SETTING_UPDATE_ORG") {
      const { org } = Locator.parse(locator);
      
      // Invalidate queries
      queryClient.invalidateQueries({ 
        queryKey: ["org-setting", org] 
      });
      
      // Force refetch immediately
      queryClient.refetchQueries({ 
        queryKey: ["org-setting", org] 
      });
      
      // Dispatch custom event for UI updates
      window.dispatchEvent(new CustomEvent("setting-updated"));
    }
  },
});
```

### 5.2 Listen for Manual Updates

```typescript
// In your view component
useEffect(() => {
  const handleUpdate = () => {
    // Clear caches, trigger reloads, etc.
  };

  window.addEventListener("setting-updated", handleUpdate);
  return () => {
    window.removeEventListener("setting-updated", handleUpdate);
  };
}, []);
```

## Step 6: Environment Variables

### 6.1 Frontend (Vite)

```typescript
// apps/web/.env
VITE_USE_LOCAL_BACKEND=true

// Access in code
import.meta.env.VITE_USE_LOCAL_BACKEND === "true"
```

### 6.2 Backend (Cloudflare Workers)

```toml
# apps/api/wrangler.toml
[vars]
VITE_USE_LOCAL_BACKEND = true
```

```typescript
// Access in code
const { VITE_USE_LOCAL_BACKEND } = getEnv(ctx);
```

**Critical**: `import.meta.env` does NOT work in Cloudflare Workers. Use `getEnv(ctx)`.

### 6.3 Dynamic API URL Resolution

```typescript
// packages/sdk/src/mcp/context.ts
export const DECO_CMS_API = (ctx: AppContext, isDecoChat: boolean) =>
  getEnv(ctx).VITE_USE_LOCAL_BACKEND === "true"
    ? "http://localhost:3001"
    : isDecoChat
      ? "https://api.deco.chat"
      : "https://api.decocms.com";
```

## Step 7: Organization Layout Integration

### 7.1 Add Context Providers

For org-level features that need AI chat:

```typescript
// apps/web/src/components/layout/org.tsx

export function OrgsLayout() {
  return (
    <WithWorkspaceTheme>
      <ThreadManagerProvider>
        <ThreadContextProvider>
          <DecopilotThreadProvider>
            {/* Your org layout content */}
          </DecopilotThreadProvider>
        </ThreadContextProvider>
      </ThreadManagerProvider>
    </WithWorkspaceTheme>
  );
}
```

### 7.2 Conditional Chat Panel

```typescript
import { useLocation } from "react-router";

const location = useLocation();
const isFeaturePage = location.pathname.endsWith('/feature-editor');

return (
  <ResizablePanelGroup direction="horizontal">
    <ResizablePanel className="bg-background">
      <Outlet />
    </ResizablePanel>
    {decopilotOpen && isFeaturePage && (
      <>
        <ResizableHandle withHandle />
        <ResizablePanel defaultSize={30}>
          <DecopilotChat />
        </ResizablePanel>
      </>
    )}
  </ResizablePanelGroup>
);
```

## Common Patterns & Best Practices

### Real-Time UI Updates

For features that manipulate CSS or DOM:

```typescript
// Store current value before changing
const currentValue = form.getValues("setting");
previousValueRef.current = currentValue;

// Apply immediately to DOM
document.documentElement.style.setProperty("--custom-var", newValue);

// Debounce form update
debounceTimerRef.current = window.setTimeout(() => {
  form.setValue("setting", newValue, { shouldDirty: true });
}, 100);
```

### Undo Functionality

**CRITICAL**: Undo should revert to the **saved state**, not the -1 change:

```typescript
const previousValuesRef = useRef<Record<string, string>>({});

// Reset previous values when saved data changes
useEffect(() => {
  form.reset({ variables: currentData?.variables ?? {} });
  previousValuesRef.current = {};
}, [currentData, form]);

const handleChange = (key: string, value: string) => {
  // Store the ORIGINAL saved value only once
  // This way undo always reverts to the saved state, not the -1 change
  if (!(key in previousValuesRef.current)) {
    const savedValue = currentData?.variables?.[key];
    if (savedValue) {
      previousValuesRef.current[key] = savedValue;
    }
  }
  
  // Apply immediately to DOM
  document.documentElement.style.setProperty(key, value);
  
  // Debounce form update
  debounceTimerRef.current = window.setTimeout(() => {
    form.setValue(key, value, { shouldDirty: true });
  }, 100);
};

const handleUndo = (key: string) => {
  const savedValue = previousValuesRef.current[key];
  if (savedValue) {
    // Revert to the saved value from database
    document.documentElement.style.setProperty(key, savedValue);
    form.setValue(key, savedValue);
    delete previousValuesRef.current[key];
  }
};

// ❌ BAD: This only undoes the last change, not all changes since last save
const handleChangeBad = (key: string, value: string) => {
  previousValuesRef.current[key] = form.getValues(key); // Overwrites on every change!
  form.setValue(key, value);
};
```

### Permission Checks

Always use team/org slugs for authorization:

```typescript
// ❌ BAD - Using numeric ID
await assertTeamResourceAccess("TEAMS_UPDATE", orgId, c);

// ✅ GOOD - Using slug
const orgSlug = c.locator?.org;
await assertTeamResourceAccess("TEAMS_UPDATE", orgSlug, c);
```

### Tool Discovery in UI

The `IntegrationToolsetDisplay` component automatically discovers and displays tools:

```typescript
// In context-resources.tsx
const { data: toolsData } = useTools(integration.connection);
const tools = toolsData?.tools || [];

// Tools are automatically fetched and displayed
{tools.map((tool) => (
  <ToolItem key={tool.name} tool={tool} />
))}
```

## Checklist for New Native Apps

- [ ] Create MCP tool group with descriptive name
- [ ] Implement tools with object return types
- [ ] Handle org context with auto-resolution
- [ ] Use slug-based authorization
- [ ] Add to NATIVE_APPS and DEFAULT_VIEWS
- [ ] Update sidebar wellKnownItems and resourceTypeOrder
- [ ] Create resource list component with visit tracking
- [ ] Create main view component with AI context
- [ ] Add route to main.tsx
- [ ] Implement chat reload on AI updates
- [ ] Add environment variables if needed
- [ ] Test tool discovery in chat UI
- [ ] Verify permissions with different roles
- [ ] Test real-time updates
- [ ] Add undo functionality if appropriate

## Example: Theme Editor

See the complete theme editor implementation for reference:
- MCP Tools: `packages/sdk/src/mcp/theme/api.ts`
- CRUD: `packages/sdk/src/crud/theme.ts`
- Hooks: `packages/sdk/src/hooks/theme.ts`
- View: `apps/web/src/components/theme-editor/`
- Integration: Search for "Theme" across the codebase

This follows all patterns and demonstrates real-world usage of native apps with full AI chat integration.
