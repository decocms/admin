---
description: 
globs: 
alwaysApply: false
---
# How to Add New API to decocms.com System

This guide provides a step-by-step process for adding new APIs to the decocms system, following established patterns and best practices.

## Prerequisites

- Database design understanding (tables, relationships, indexes)
- TypeScript knowledge
- Familiarity with Zod schemas
- Understanding of Row Level Security (RLS) policies

## Step 1: Create MCP API Module (`packages/sdk/src/mcp/{feature}/api.ts`)

### 1.1 Basic File Structure

```typescript
import { z } from "zod";
import { UserInputError } from "../../errors.ts";
import type { QueryResult } from "../../storage/index.ts";
import {
  assertHasWorkspace,
  assertWorkspaceResourceAccess,
} from "../assertions.ts";
import { AppContext, createToolGroup } from "../context.ts";

// Table constants
const DECO_CHAT_FEATURE_TABLE = "deco_chat_feature" as const;

// Query constants for type safety
const SELECT_FEATURE_QUERY = `
  id,
  name,
  workspace,
  created_at,
  updated_at
` as const;

// Zod schemas for output validation
const FeatureSchema = z.object({
  id: z.string(),
  name: z.string(),
  workspace: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
});

// TypeScript types
export type Feature = {
  id: string;
  name: string;
  workspace: string;
  created_at: string;
  updated_at: string;
};

// Type-safe mappers using QueryResult pattern
const Mappers = {
  toFeature: (data: QueryResult<typeof DECO_CHAT_FEATURE_TABLE, typeof SELECT_FEATURE_QUERY>): Feature => {
    return {
      id: data.id,
      name: data.name,
      workspace: data.workspace,
      created_at: data.created_at,
      updated_at: data.updated_at,
    };
  },
};

// Tool group creation
const createTool = createToolGroup("Feature", {
  name: "Feature Management",
  description: "Manage features in the workspace.",
  icon: "https://assets.decocache.com/mcp/{uuid}/feature.png",
});
```

### 1.2 Return Type Requirements

**CRITICAL**: MCP tools MUST return objects, not nullable primitives:

```typescript
// ❌ BAD - TypeScript error: null not assignable to object
export const getFeature = createTool({
  name: "FEATURE_GET",
  handler: async ({ id }, c) => {
    const feature = await fetchFeature(id);
    return feature || null;  // ERROR: Type 'Feature | null' not assignable
  },
});

// ✅ GOOD - Wrap in object
export const getFeature = createTool({
  name: "FEATURE_GET",
  outputSchema: z.object({ 
    feature: FeatureSchema.nullable() 
  }),
  handler: async ({ id }, c) => {
    const feature = await fetchFeature(id);
    return { feature: feature || null };  // ✅ Always returns object
  },
});
```

### 1.3 Organization Context Handling

For org-level operations, auto-resolve context and use slug-based authorization:

```typescript
import { getOrgIdFromContext } from "../projects/util.ts";

export const updateOrgFeature = createTool({
  name: "FEATURE_UPDATE_ORG",
  inputSchema: z.object({
    orgId: z.number().optional().describe("Auto-resolved from context if not provided"),
    featureData: FeatureSchema,
  }),
  handler: async (props, c) => {
    // 1. Auto-resolve org ID from context
    const orgId = props.orgId ?? await getOrgIdFromContext(c);
    
    if (!orgId) {
      throw new Error("No organization context available");
    }

    // 2. Use org SLUG for authorization (not ID!)
    const orgSlug = c.locator?.org;
    if (!orgSlug) {
      throw new Error("No organization slug in context");
    }
    
    // ❌ WRONG - Authorization expects slugs, not IDs
    // await assertTeamResourceAccess("TEAMS_UPDATE", orgId, c);
    
    // ✅ CORRECT - Use slug from locator
    await assertTeamResourceAccess("TEAMS_UPDATE", orgSlug, c);

    // 3. Use correct database client
    const result = await c.drizzle  // Drizzle for org table
      .update(organizations)
      .set({ feature: props.featureData })
      .where(eq(organizations.id, orgId))
      .returning();

    return { feature: result[0].feature };
  },
});
```

**Key Points**:
- Make `orgId` optional in input schema
- Auto-resolve using `getOrgIdFromContext(c)`
- Always use **org slug** for `assertTeamResourceAccess`, never numeric ID
- Use `c.drizzle` for Drizzle ORM (organizations table)
- Use `c.db` for Supabase operations (workspace tables)

### 1.4 Database Client Selection

Choose the correct database client for your operation:

```typescript
// ✅ Use c.db for Supabase operations (most workspace tables)
const { data, error } = await c.db
  .from(DECO_CHAT_FEATURE_TABLE)
  .select(SELECT_FEATURE_QUERY)
  .eq("workspace", workspace);

// ✅ Use c.drizzle for Drizzle ORM (organizations, Turso)
const result = await c.drizzle
  .select()
  .from(organizations)
  .where(eq(organizations.id, orgId));

if (error) throw error;  // Supabase pattern
```

### 1.5 Tool Implementation Pattern

```typescript
export const listFeatures = createTool({
  name: "FEATURE_LIST",
  description: "List all features in the workspace",
  inputSchema: z.object({
    search: z.string().optional().describe("Search term to filter features by name"),
  }),
  outputSchema: z.object({ features: z.array(FeatureSchema) }),
  handler: async ({ search }, c) => {
    await assertWorkspaceResourceAccess(c);

    assertHasWorkspace(c);
    const workspace = c.workspace.value;

    let query = c.db
      .from(DECO_CHAT_FEATURE_TABLE)
      .select(SELECT_FEATURE_QUERY)
      .eq("workspace", workspace);

    if (search) {
      query = query.ilike("name", `%${search}%`);
    }

    const { data, error } = await query.order("created_at", { ascending: false });

    if (error) throw error;

    return { features: data.map(Mappers.toFeature) };
  },
});

export const createFeature = createTool({
  name: "FEATURE_CREATE",
  description: "Create a new feature",
  inputSchema: z.object({
    name: z.string().describe("The name of the feature"),
    description: z.string().optional().describe("A description of the feature"),
  }),
  outputSchema: FeatureSchema,
  handler: async ({ name, description }, c) => {
    await assertWorkspaceResourceAccess(c);

    assertHasWorkspace(c);
    const workspace = c.workspace.value;

    if (!name.trim()) {
      throw new UserInputError("Feature name cannot be empty");
    }

    const { data, error } = await c.db
      .from(DECO_CHAT_FEATURE_TABLE)
      .insert({
        workspace,
        name: name.trim(),
        description: description?.trim() || null,
        updated_at: new Date().toISOString(),
      })
      .select(SELECT_FEATURE_QUERY)
      .single();

    if (error) throw error;

    return Mappers.toFeature(data);
  },
});
```

## Step 2: Export APIs in MCP Index (`packages/sdk/src/mcp/index.ts`)

### 2.1 Add Import Statement

```typescript
import * as featureAPI from "./feature/api.ts";
```

### 2.2 Add Tools to WORKSPACE_TOOLS Array

```typescript
export const WORKSPACE_TOOLS = [
  // ... existing tools ...
  featureAPI.listFeatures,
  featureAPI.createFeature,
  featureAPI.updateFeature,
  featureAPI.deleteFeature,
  // ... more tools ...
] as const;
```

## Step 3: Create Database Migration (`supabase/migrations/{timestamp}_{feature_name}.sql`)

### 3.1 Create Migration File

Run: `supabase migration new feature_management`

### 3.2 Migration Content

```sql
-- Create main feature table
CREATE TABLE IF NOT EXISTS public.deco_chat_feature (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL,
  workspace text NOT NULL,
  description text,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  deleted_at timestamptz, -- for soft deletes
  CONSTRAINT unique_feature_name_workspace UNIQUE(name, workspace)
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_feature_workspace
  ON public.deco_chat_feature (workspace);

CREATE INDEX IF NOT EXISTS idx_feature_name
  ON public.deco_chat_feature (name);

-- Enable Row Level Security
ALTER TABLE public.deco_chat_feature ENABLE ROW LEVEL SECURITY;
```

## Step 4: Create Policies Migration (`supabase/migrations/{timestamp}_{feature_name}_policies.sql`)

### 4.1 Policy Structure with Sequential Role Numbers

```sql
-- Feature policies for viewing and managing features
INSERT INTO "public"."policies" ("id", "created_at", "name", "statements", "description", "team_id") VALUES 
('65', '2025-01-15 12:00:00.000000+00', 'view_feature', ARRAY[
    '{"effect":"allow","resource":"FEATURE_LIST"}'::jsonb,
    '{"effect":"allow","resource":"FEATURE_GET"}'::jsonb
], 'Allow users to list and view features', null),
('66', '2025-01-15 12:00:00.000000+00', 'manage_feature', ARRAY[
    '{"effect":"allow","resource":"FEATURE_CREATE"}'::jsonb,
    '{"effect":"allow","resource":"FEATURE_UPDATE"}'::jsonb,
    '{"effect":"allow","resource":"FEATURE_DELETE"}'::jsonb
], 'Allow users to create, update, and delete features', null)
ON CONFLICT (id) DO NOTHING;

-- Associate feature view policy with all roles (1=owner, 3=member, 4=admin)
INSERT INTO "public"."role_policies" ("id", "created_at", "role_id", "policy_id") VALUES 
('350', '2025-01-15 12:00:00.000000+00', '1', '65'),
('351', '2025-01-15 12:00:00.000000+00', '3', '65'),
('352', '2025-01-15 12:00:00.000000+00', '4', '65')
ON CONFLICT (id) DO NOTHING;

-- Associate feature management policy with owner (1) and admin (4)
INSERT INTO "public"."role_policies" ("id", "created_at", "role_id", "policy_id") VALUES 
('353', '2025-01-15 12:00:00.000000+00', '1', '66'),
('354', '2025-01-15 12:00:00.000000+00', '4', '66')
ON CONFLICT (id) DO NOTHING;
```

### 4.2 Role Number Guidelines

- **Role 1**: Owner (full access)
- **Role 3**: Member (limited access, usually view-only)
- **Role 4**: Admin (elevated access, can manage)

### 4.3 Sequential ID Guidelines

- **Policy IDs**: Find the highest existing policy ID and increment sequentially
- **Role Policy IDs**: Find the highest existing role_policy ID and increment sequentially

## Step 5: Input/Output Type Safety

### 5.1 Strongly Typed Database Queries

Always use the `QueryResult` pattern:

```typescript
type FeatureRow = QueryResult<typeof DECO_CHAT_FEATURE_TABLE, typeof SELECT_FEATURE_QUERY>;

const Mappers = {
  toFeature: (data: FeatureRow): Feature => {
    return {
      id: data.id,
      name: data.name,
      workspace: data.workspace,
      created_at: data.created_at,
      updated_at: data.updated_at,
    };
  },
};
```

### 5.2 Complex Queries with Joins

```typescript
const SELECT_FEATURE_WITH_METADATA_QUERY = `
  ${SELECT_FEATURE_QUERY},
  metadata:deco_chat_feature_metadata!inner(
    id,
    key,
    value
  )
` as const;

type FeatureWithMetadataRow = QueryResult<
  typeof DECO_CHAT_FEATURE_TABLE, 
  typeof SELECT_FEATURE_WITH_METADATA_QUERY
>;
```

### 5.3 Zod Schemas

Define both input and output schemas:

```typescript
const CreateFeatureInputSchema = z.object({
  name: z.string().min(1).max(255),
  description: z.string().optional(),
});

const FeatureOutputSchema = z.object({
  id: z.string(),
  name: z.string(),
  workspace: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
});
```

## Step 6: Development Workflow

### 6.1 Run Database Migration

```bash
deno run db:migration
```

### 6.2 Update Database Types

```bash
deno run db:types
```

### 6.3 Test API Tools

Verify tools are accessible through the MCP client and policies are working correctly.

## Best Practices

### Database Design
- Always include `workspace` for multi-tenancy
- Use `uuid` for primary keys
- Include `created_at`, `updated_at` timestamps
- Consider soft deletes with `deleted_at`
- Add appropriate indexes for performance

### Security
- Enable RLS on all tables
- Use workspace-scoped queries
- Implement proper role-based access control
- Follow least privilege principle

### Type Safety
- Use `QueryResult` pattern for all database operations
- Define clear TypeScript interfaces
- Validate inputs/outputs with Zod schemas
- Leverage generated database types

### Error Handling
- Use appropriate error types (`UserInputError`, `NotFoundError`, etc.)
- Provide meaningful error messages
- Handle database errors gracefully

### Performance
- Use appropriate database indexes
- Implement pagination for list operations
- Consider query optimization
- Use proper select statements (avoid SELECT *)

## Common Patterns

### List Operations
```typescript
export const listItems = createTool({
  name: "ITEMS_LIST",
  outputSchema: z.object({ items: z.array(ItemSchema) }),
  handler: async ({ search, limit = 10 }, c) => {
    // Always scope to workspace
    // Add search functionality
    // Implement pagination
    // Return wrapped in object
    return { items: data.map(Mappers.toItem) };
  },
});
```

### CRUD Operations
```typescript
// CREATE
export const createItem = createTool({
  name: "ITEMS_CREATE",
  outputSchema: ItemSchema,
  handler: async (props, c) => {
    // Validate input
    // Check workspace access
    // Insert with workspace scope
    return Mappers.toItem(data);
  },
});

// UPDATE
export const updateItem = createTool({
  name: "ITEMS_UPDATE",
  outputSchema: ItemSchema,
  handler: async ({ id, ...updates }, c) => {
    // Check existence and workspace ownership
    // Validate updates
    // Perform update
    return Mappers.toItem(data);
  },
});

// DELETE
export const deleteItem = createTool({
  name: "ITEMS_DELETE",
  outputSchema: z.object({ success: z.boolean() }),
  handler: async ({ id }, c) => {
    // Check existence and workspace ownership
    // Soft delete or hard delete
    return { success: true };
  },
});
```

### Helper Functions
```typescript
// Reusable helper for ownership checks
async function ensureItemOwnership(id: string, workspace: string, db: AppContext["db"]): Promise<Item> {
  const { data, error } = await db
    .from(DECO_CHAT_ITEMS_TABLE)
    .select(SELECT_ITEM_QUERY)
    .eq("id", id)
    .eq("workspace", workspace)
    .maybeSingle();

  if (error) throw error;
  if (!data) throw new NotFoundError("Item not found");

  return Mappers.toItem(data);
}
```

## Example Complete Implementation

See the registry API implementation (`packages/sdk/src/mcp/registry/api.ts`) for a complete reference that follows all these patterns:

- ✅ Strongly typed with `QueryResult` pattern
- ✅ Proper Zod input/output schemas
- ✅ Workspace-scoped operations
- ✅ Role-based access control
- ✅ Error handling
- ✅ Database migrations and policies
- ✅ Performance optimizations

This guide ensures consistency, type safety, and security across all new APIs added to the deco.chat system.
