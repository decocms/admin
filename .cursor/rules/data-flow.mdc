---
description: When working on anything related to dataflow, creating new tools, editing some functionality that envolves backend and frontend. Mentions Tools, Authorization and so on
globs: 
alwaysApply: false
---
# Data Flow Architecture

This document explains how data flows through the deco.chat system, covering the API structure, client communication patterns, and authorization mechanisms.

## Overview

The system uses a **Model Context Protocol (MCP)** architecture where:
- **Backend**: Collection of MCP Servers exposing typed tools
- **Client**: Uses MCPClient to communicate with servers
- **Frontend**: Uses React Query for data fetching and caching
- **Security**: Role-based authorization controls tool access

## 1. MCP Server Architecture

### Server Structure
The API exposes multiple MCP servers at different endpoints:

```
/mcp                        → GLOBAL_TOOLS (teams, profiles, integrations)
/:root/:slug/mcp           → WORKSPACE_TOOLS (agents, threads, models)
/:root/:slug/agents/:id/mcp → AGENT_TOOLS (agent-specific operations)
/:root/:slug/email/mcp     → EMAIL_TOOLS (email operations)
```

### Tool Registration
MCP tools are registered with strict typing:

```typescript
// Tool Definition
interface Tool<TName, TInput, TReturn> {
  name: TName;
  description: string;
  inputSchema: z.ZodType<TInput>;      // Zod schema for input validation
  outputSchema?: z.ZodType<TReturn>;   // Zod schema for output validation
  handler: (props: TInput, context: AppContext) => Promise<TReturn>;
}

// Server Registration
server.registerTool(tool.name, {
  description: tool.description,
  inputSchema: tool.inputSchema.shape,
  outputSchema: tool.outputSchema?.shape,
}, tool.handler);
```

### Tool Collections
Tools are organized into typed collections:

```typescript
// Global tools (no workspace required)
export const GLOBAL_TOOLS = [
  teamsAPI.createTeam,
  profilesAPI.getProfile,
  integrationsAPI.listTools,
  // ...
] as const;

// Workspace tools (workspace-scoped)
export const WORKSPACE_TOOLS = [
  agentsAPI.createAgent,
  threadsAPI.getThread,
  modelsAPI.listModels,
  // ...
] as const;
```

## 2. Client Communication (MCPClient)

### MCPClient Structure
The client provides type-safe access to MCP tools:

```typescript
// Client factory methods
const MCPClient = {
  // Global tools
  PROFILES_GET: (params: GetProfileInput) => Promise<Profile>,
  TEAMS_CREATE: (params: CreateTeamInput) => Promise<Team>,
  
  // Workspace-scoped tools
  forWorkspace: (workspace: string) => ({
    AGENTS_CREATE: (params: CreateAgentInput) => Promise<Agent>,
    THREADS_LIST: (params: ListThreadsInput) => Promise<ThreadList>,
    // ...
  }),
  
  // Connection-specific tools
  forConnection: (connection: MCPConnection) => ({
    // Dynamic tools based on connection
  })
};
```

### HTTP Communication
MCPClient translates tool calls to HTTP requests:

```typescript
// Tool call: MCPClient.AGENTS_CREATE(params)
// Becomes HTTP request:
POST /users/john/mcp/tools/call/AGENTS_CREATE
{
  "body": { /* params */ },
  "headers": {
    "Authorization": "Bearer <token>",
    "Content-Type": "application/json"
  }
}
```

### Connection Types
The system supports multiple MCP connection types:

```typescript
type MCPConnection = 
  | { type: "HTTP", url: string, token?: string }
  | { type: "SSE", url: string, token?: string }
  | { type: "Websocket", url: string }
  | { type: "Deco", tenant: string, token?: string }
  | { type: "INNATE", name: string, workspace?: string }
```

## 3. React Query Integration

### Query Keys Structure
Consistent query key patterns for caching:

```typescript
export const KEYS = {
  AGENT: (workspace: Workspace, agentId?: string) => 
    ["agent", workspace, agentId],
  THREADS: (workspace: Workspace, options?: ThreadFilterOptions) => 
    ["threads", workspace, options?.agentId, options?.resourceId],
  INTEGRATION_TOOLS: (workspace: Workspace, integrationId: string) => 
    ["integration-tools", workspace, integrationId],
  // ...
};
```

### Hook Patterns
Standardized hooks for each resource:

```typescript
// Query hooks
export const useAgent = (agentId: string) => {
  const { workspace } = useSDK();
  return useSuspenseQuery({
    queryKey: KEYS.AGENT(workspace, agentId),
    queryFn: () => loadAgent(workspace, agentId),
  });
};

// Mutation hooks
export const useCreateAgent = () => {
  const { workspace } = useSDK();
  const client = useQueryClient();
  
  return useMutation({
    mutationFn: (agent: Partial<Agent>) => createAgent(workspace, agent),
    onSuccess: (result) => {
      // Update cache
      client.setQueryData(KEYS.AGENT(workspace, result.id), result);
      client.setQueryData(KEYS.AGENT(workspace), (old) => 
        old ? [result, ...old] : [result]
      );
    },
  });
};
```

### Cache Management
React Query handles caching with optimistic updates:

```typescript
// Optimistic update pattern
const updateMutation = useMutation({
  mutationFn: updateAgent,
  onMutate: async (newAgent) => {
    // Cancel outgoing refetches
    await client.cancelQueries(KEYS.AGENT(workspace, newAgent.id));
    
    // Snapshot previous value
    const previousAgent = client.getQueryData(KEYS.AGENT(workspace, newAgent.id));
    
    // Optimistically update
    client.setQueryData(KEYS.AGENT(workspace, newAgent.id), newAgent);
    
    return { previousAgent };
  },
  onError: (err, newAgent, context) => {
    // Rollback on error
    client.setQueryData(KEYS.AGENT(workspace, newAgent.id), context.previousAgent);
  },
});
```

## 4. Authorization System

### Resource Access Control
Every MCP tool must explicitly grant access:

```typescript
// Tool handler pattern
handler: async (props: TInput, context: AppContext) => {
  // 1. Perform authorization checks
  await assertWorkspaceResourceAccess(context.tool.name, context);
  
  // 2. Explicitly grant access (required!)
  context.resourceAccess.grant();
  
  // 3. Execute business logic
  const result = await businessLogic(props);
  
  return result;
}
```

### Authorization Hierarchy
The system checks authorization in order:

1. **Local Development**: Automatic access if `context.isLocal`
2. **API Keys**: Check policies attached to API key
3. **User Workspace**: Personal workspace access (`users/:userId`)
4. **Shared Workspace**: Team-based access with policies (`shared/:teamSlug`)

### Policy-Based Access
Authorization uses policy statements:

```typescript
interface Policy {
  statements: Array<{
    effect: "allow" | "deny";
    resource: string;  // e.g., "AGENTS_CREATE", "THREADS_LIST"
  }>;
}

// Policy evaluation: deny overrides allow
const canAccess = await authorizationClient.canAccess(
  userId,
  workspace,
  "AGENTS_CREATE"
);
```

### API Key Authorization
API keys include embedded policies:

```typescript
// API key creation
const apiKey = await createApiKey({
  name: "My API Key",
  policies: [
    { effect: "allow", resource: "AGENTS_CREATE" },
    { effect: "allow", resource: "THREADS_LIST" },
    { effect: "deny", resource: "TEAMS_DELETE" }
  ]
});

// JWT token includes workspace and policies
const token = jwt.sign({
  sub: `api-key:${apiKey.id}`,
  aud: workspace,
  policies: apiKey.policies
});
```

## 5. Integration Flow

### Complete Data Flow Example
Here's how a typical operation flows through the system:

```typescript
// 1. Frontend hook call
const createAgent = useCreateAgent();
await createAgent.mutateAsync({
  name: "My Agent",
  instructions: "You are a helpful assistant"
});

// 2. React Query mutation
mutationFn: (agent) => createAgent(workspace, agent)

// 3. MCPClient call
MCPClient.forWorkspace(workspace).AGENTS_CREATE(agent)

// 4. HTTP request
POST /users/john/mcp/tools/call/AGENTS_CREATE
Authorization: Bearer <jwt-token>

// 5. MCP server routing
app.all("/:root/:slug/mcp", createMCPHandlerFor(WORKSPACE_TOOLS))

// 6. Tool execution
const tool = WORKSPACE_TOOLS.find(t => t.name === "AGENTS_CREATE");
await tool.handler(agent, context);

// 7. Authorization check
await assertWorkspaceResourceAccess(context, "AGENTS_CREATE");
context.resourceAccess.grant();

// 8. Database operation
const result = await db.from("agents").insert(agent);

// 9. Response & cache update
React Query updates cache and triggers re-renders
```

## 6. Virtual Integrations

### Tool Groups as Integrations
Tool groups automatically become virtual integrations accessible via `i:{group-name}`:

```typescript
// Tool group definition
export const createTool = createToolGroup("Theme", {
  name: "Theme Management",
  description: "Manage organization-level themes.",
  icon: "https://assets.decocache.com/mcp/.../theme.png",
});

// Becomes virtual integration: i:theme-management
// Accessible in frontend via:
const { data: tools } = useTools(integration.connection);
```

### Virtual Integration URL Construction
```typescript
// Backend: packages/sdk/src/mcp/integrations/api.ts
const virtualIntegrationsFor = (group: string, workspace: boolean, apiUrl: string) => {
  const url = workspace 
    ? new URL(`${apiUrl}/${locator}/mcp?group=${group}`)
    : new URL(`${apiUrl}/mcp?group=${group}`);
  
  return {
    id: `i:${group}`,
    connection: { type: "HTTP", url: url.href },
    // ...
  };
};
```

## 7. Environment Variables

### Frontend vs Backend
Critical difference between Vite and Cloudflare Workers:

```typescript
// ❌ WRONG - import.meta.env doesn't exist in Cloudflare Workers
const apiUrl = import.meta.env.VITE_API_URL;

// ✅ Frontend (Vite) - Use import.meta.env
const apiUrl = import.meta.env.VITE_API_URL;

// ✅ Backend (Workers) - Use getEnv(ctx)
const apiUrl = getEnv(ctx).VITE_API_URL;
```

### Configuration Files
```typescript
// Frontend: apps/web/.env
VITE_USE_LOCAL_BACKEND=true

// Backend: apps/api/wrangler.toml
[vars]
VITE_USE_LOCAL_BACKEND = true
```

### Dynamic API URL Resolution
```typescript
// packages/sdk/src/mcp/context.ts
export const DECO_CMS_API = (ctx: AppContext, isDecoChat: boolean) =>
  getEnv(ctx).VITE_USE_LOCAL_BACKEND === "true"
    ? "http://localhost:3001"
    : isDecoChat
      ? "https://api.deco.chat"
      : "https://api.decocms.com";

// Usage in API handlers
const getApiUrl = (c: AppContext): string => {
  return DECO_CMS_API(c, false);
};
```

## 8. Best Practices

### Tool Development
- Always use Zod schemas for input/output validation
- Call `context.resourceAccess.grant()` after authorization checks
- Use descriptive tool names following the pattern `{RESOURCE}_{ACTION}`
- Group related tools by functionality
- Return objects, not nullable primitives (MCP requirement)
- Use slug-based authorization for team resources

### Frontend Integration
- Use consistent query keys from `KEYS` object
- Implement optimistic updates for better UX
- Handle loading and error states appropriately
- Use `useSuspenseQuery` for critical data
- Include `locator` in all scoped API calls

### Authorization
- Always check workspace/team access before operations
- Use **org slugs** for team resource access, not IDs
- Use least-privilege principle for API keys
- Implement proper error handling for forbidden operations
- Log authorization failures for debugging

### Performance
- Cache frequently accessed data with appropriate TTL
- Use React Query's built-in deduplication
- Implement proper pagination for large datasets
- Use parallel queries where appropriate

This architecture ensures type safety, proper authorization, and efficient data management throughout the application. 