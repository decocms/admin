---
import { getCollection } from "astro:content";
import { ui } from "../../i18n/ui";
import SidebarComponent from "./Sidebar.tsx";

const locale = Astro.params.locale;

const allDocs = await getCollection("docs");
const docs = allDocs.filter((doc) => doc.id.split("/")[0] === locale);

interface TreeNode {
  name: string;
  type: "file" | "folder";
  children: TreeNode[];
  doc?: any;
  path: string[];
  id: string;
}

function buildTree(docs: any[]): TreeNode[] {
  const root: TreeNode[] = [];

  docs.forEach((doc) => {
    const pathParts = doc.id.split("/").slice(1);
    let currentLevel = root;

    pathParts.forEach((part: string, index: number) => {
      const isFile = index === pathParts.length - 1;
      const existing = currentLevel.find((node) => node.name === part);

      if (existing) {
        if (isFile) {
          existing.doc = doc;
        }
        currentLevel = existing.children;
      } else {
        const newNode: TreeNode = {
          name: part,
          type: isFile ? "file" : "folder",
          children: [],
          path: pathParts.slice(0, index + 1),
          id: pathParts.slice(0, index + 1).join("/"),
          ...(isFile && { doc }),
        };
        currentLevel.push(newNode);
        currentLevel = newNode.children;
      }
    });
  });

  // Sort the tree for consistent ordering
  const sortTree = (nodes: TreeNode[]): TreeNode[] => {
    const sorted = nodes
      .filter((node) => node.name !== "bounties")
      .sort((a, b) => {
        // First sort by type: files before folders
        if (a.type !== b.type) {
          return a.type === "file" ? -1 : 1;
        }

        // For files only - custom ordering
        if (a.type === "file" && b.type === "file") {
          // Force introduction to be first regardless of filename
          if (a.name.includes("introduction")) return -1;
          if (b.name.includes("introduction")) return 1;

          // Then getting-started
          if (a.name.includes("getting-started")) return -1;
          if (b.name.includes("getting-started")) return 1;

          // Then project-structure
          if (a.name.includes("project-structure")) return -1;
          if (b.name.includes("project-structure")) return 1;

          // Then cli-reference
          if (a.name.includes("cli-reference")) return -1;
          if (b.name.includes("cli-reference")) return 1;

          // Then bounties (last)
          if (a.name.includes("bounties")) return -1;
          if (b.name.includes("bounties")) return 1;
        }

        // Default alphabetical
        return a.name.localeCompare(b.name);
      });

    return sorted.map((node) => ({
      ...node,
      children: sortTree(node.children),
    }));
  };

  return sortTree(root);
}

const tree = buildTree(docs);

interface FlatNode {
  name: string;
  type: "file" | "folder";
  doc?: any;
  path: string[];
  depth: number;
  id: string;
  hasChildren: boolean;
}

function flattenTree(nodes: TreeNode[], depth = 0): FlatNode[] {
  const result: FlatNode[] = [];

  nodes.forEach((node) => {
    result.push({
      name: node.name,
      type: node.type,
      doc: node.doc,
      path: node.path,
      depth,
      id: node.id,
      hasChildren: node.children.length > 0,
    });

    if (node.children.length > 0) {
      result.push(...flattenTree(node.children, depth + 1));
    }
  });

  return result;
}

const flatTree = flattenTree(tree);
---

<SidebarComponent
  client:load
  tree={flatTree}
  locale={locale || "en"}
  translations={ui[locale as keyof typeof ui] || ui.en}
/>
